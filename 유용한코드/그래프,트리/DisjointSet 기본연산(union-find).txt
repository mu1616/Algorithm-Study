Disjoint Set
https://bowbowbow.tistory.com/26

Disjoint Set이란
서로 중복되지 않는 부분 집합들 로 나눠진 원소들에 대한 정보를 저장하고 조작하는 자료구조
집합을 구현하는 데는 비트 벡터, 배열, 연결 리스트를 이용할 수 있으나 그 중 가장 효율적인 트리 구조 (아래 참고*)를 이용하여 구현한다.

Union-Find의 연산
make-set(x)
-초기화
-x를 유일한 원소로 하는 새로운 집합을 만든다.

union(x, y)
-합하기
-x가 속한 집합과 y가 속한 집합을 합친다. 즉, x와 y가 속한 두 집합을 합치는 연산
-x, y의 루트 노드를 찾고 다르면 y를 x의 자손으로 넣어 두 트리를 합한다.
-시간 복잡도: O(N)보다 작으므로 find 연산이 전체 수행 시간이 지배한다.

find(x)
-찾기
-x가 속한 집합의 대표값(루트 노드 값)을 반환한다. 즉, x가 어떤 집합에 속해 있는지 찾는 연산
-노드의 집합 번호는 루트 노드이므로, 루트 노드를 확인하여 같은 집합인지 확인한다.
-시간 복잡도: 트리의 높이와 시간 복잡도가 동일하다. (최악: O(N-1))

Union-Find의 기본적인 구현 방법
/* 초기화 */
int parent[MAX_SIZE];
for(int i=0; i< MAX_SIZE; i++)
	parent[i] = i;

/* find(x): 재귀 이용 */
int find(int x) {
	//루트 노드는 부모 노드 번호로 자기 자신을 가진다.
	if(parent[x] == x) {
		return x;
	} else {
		//각 노드의 부모 노드를 찾아 올라간다.
		return find(parent[x]);
	}
}

/* union(x, y) */
void union(int x, int y){
	//각 원소가 속한 트리의 루트 노드를 찾는다.
	x = find(x);
	y = find(y);
	
	if(x !=y)
	parent[y] = x;
}

