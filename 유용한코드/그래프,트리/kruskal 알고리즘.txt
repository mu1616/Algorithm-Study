kruskal 알고리즘
: prim이 노드를 선택해서 MST를 찾는 알고리즘이라면, 
kruskal은 간선을 하나씩 선택해서 MST를 찾는 알고리즘

1) 모든 간선을 가중치에따라 오름차순으로 정렬
2) 가중치가 가장 낮은 간선부터 선택하면서 트리를 증가시킴(싸이클이 존재하면 다음으로 가중치가 낮은 간선 선택)
3) N-1개의 간선이 선택될 때 까지 2) 반복

* 사이클 여부는 Union-find 자료구조를 사용해서 판단
ex) 0-1-2가 이어져있는 상태에서 0-3 선택 => 0-1-2 집합과 3 은 다른 집합이기 때문에 선택 가능
	0-1-2가 이어져있는 상태에서 0-2 선택 => 0-1-2 집합과 2은 같은 집합이기 때문에 선택 불가능

krukal 알고리즘 코드

struct edge_type {
	int u;
	int v;
	int cost;
};

edge_type EdgeArr[max_n * (max_n - 1) / 2];  // 무방향 그래프에서 가질 수 있는 노드의 최대 개수
int edgeCnt;
int parent[max_n};

int kruskal() {
	sort(edgeArr) // cost로 오름차순 정렬
	for(int i = 0; i < n; i++) { // make set (처음에는 자기 자신이 집합이 됨)
		parent[i] = i;
	}
	
	int sumCost = 0;
	int selectCnt = 0;
	for(int i = 0; i < edgeCnt; i++) {
		int u = edgeArr[i].u
		int v = edgeArr[i].v;
		if(findSet(u) == findSet(v)) continue; // Cycle
		
		parent[findSet(u)] = findSet(v); // Union
		
		sumCost += edgeArr[i].cost;
		if(++selectCnt >= n - 1) break; // n-1개 선택했다면 끝
}